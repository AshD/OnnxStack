@page
@using OnnxStack.StableDiffusion.Enums;
@model TextToImageModel
@{
    ViewData["Title"] = "Stable Diffusion";
    var ValidSizes = new List<int> { 64, 128, 192, 256, 320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960, 1024 };
}

<style>
    textarea {
        resize: none;
        font-size: smaller !important
    }
</style>


<div class="d-flex flex-row h-100 pt-1 pb-1">
    <div class="d-flex flex-fill">

        @*  Controls *@
        <div class="d-flex flex-column w-100 me-2 p-2 border border-1" style="max-width:600px">

            <h4 class="pb-0 mb-0">Text To Image</h4>
            <small>Text to image transforms textual descriptions into visual content</small>
            <div class="border-bottom mt-1 mb-1"></div>
            <div class="d-flex flex-column justify-content-between h-100 mt-1">

                <div class="d-flex flex-column">
                    <form id="TextToImageParameters" autocomplete="off">
                        <div class="d-flex flex-column gap-2">
                            <div>
                                <small>Prompt</small>
                                @Html.TextAreaFor(m => m.Options.Prompt, new { @class = "form-control p-1", @rows = 4 })
                                @Html.ValidationMessageFor(m => m.Options.Prompt, "", new { @class = "text-danger" })
                            </div>
                            <div>
                                <small>Negative Prompt</small>
                                @Html.TextAreaFor(m => m.Options.NegativePrompt, new { @class = "form-control", @rows = 4 })
                                @Html.ValidationMessageFor(m => m.Options.NegativePrompt, "", new { @class = "text-danger" })
                            </div>

                            <div class="d-flex flex-row gap-2">
                                <div class="w-100">
                                    <small>Scheduler</small>
                                    @Html.DropDownListFor( m => m.Options.SchedulerType,Html.GetEnumSelectList<SchedulerType>(), new { @class = "form-control form-select"})
                                </div>
                                <div class="w-75">
                                    <small>Width</small>
                                    @Html.DropDownListFor( m => m.Options.Width, new SelectList(ValidSizes), new { @class = "form-control form-select"})
                                </div>
                                <div class="w-75">
                                    <small>Height</small>
                                    @Html.DropDownListFor( m => m.Options.Height, new SelectList(ValidSizes), new { @class = "form-control form-select"})
                                </div>
                                <div class="w-75">
                                    <small>Seed <i>(0 = Random)</i></small>
                                    @Html.TextBoxFor( m => m.Options.Seed, new { @class = "form-control"})
                                </div>
                            </div>

                            <div class="d-flex flex-row gap-2">
                                <div class="d-flex flex-column mb-2 w-100">
                                    <small>Steps</small>
                                    <div class="d-flex flex-row slider-container">
                                        @Html.TextBoxFor(m => m.Options.InferenceSteps, new { @type="range", @class = "slider", min="4", max="100", step="1" })
                                        <label>0</label>
                                    </div>
                                </div>
                                <div class="d-flex flex-column mb-2 w-100">
                                    <small>Guidance</small>
                                    <div class="d-flex flex-row slider-container">
                                        @Html.TextBoxFor(m => m.Options.GuidanceScale, new { @type="range", @class = "slider", min="0", max="40", step="0.1" })
                                        <label>0</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>

                <div class="d-flex flex-row gap-2 justify-content-between pt-5" autocomplete="off">
                    <div class="d-flex flex-column justify-content-end w-50">
                        <div class="d-flex flex-row gap-2">
                            <button type="button" class="btn-cancel btn btn-warning w-100" disabled>Cancel</button>
                            <button id="btn-txt2img-execute" type="button" class="btn btn-success w-100">Generate</button>
                        </div>
                    </div>
                    <div class="d-flex flex-row justify-content-end w-50">
                        <div>
                            <small>Mode</small>
                            <div class="d-flex flex-row gap-1">
                                <select id="result-layout" class="form-control form-select form-select-sm">
                                    <option value="Single">Single</option>
                                    <option value="Multiple">Multiple</option>
                                </select>
                                <button id="btn-clear" class="btn btn-sm btn-danger">
                                    <i class="fa fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @*  Preview *@
        <div class="d-flex w-100 p-2 border border-1">
            <div id="output-container" class="d-flex flex-fill flex-wrap justify-content-center align-content-center align-items-center">
            </div>
            <div id="output-container-grid" class="d-flex flex-fill flex-wrap justify-content-start align-content-start align-items-start gap-3" style="overflow-y:auto">
            </div>
        </div>
    </div>
</div>

<script id="progressResultTemplate" type="text/html">
    <div class="output-progress d-flex flex-column border border-1 p-1" style="min-width:256px;">
        <div style="overflow:hidden;">
            <img width="{{width}}" height="{{height}}" src="~/images/placeholder.jpg" />
        </div>
         <div class="d-flex flex-column pt-2">
            <div class="progress">
                <div class="progress-result progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
            </div>
        </div>
        <div class="d-flex flex-row gap-2 pt-2">
            <button type="button" class="btn btn-sm btn-success w-100" disabled>Download</button>
            <button  type="button" class="btn btn-sm btn-info w-100" disabled>Image To Image</button>
        </div>
    </div>
</script>

<script id="outputResultTemplate" type="text/html">
    <div class="d-flex flex-column border border-1 p-1" style="min-width:256px;">
        <div style="overflow:hidden;text-align:center">
            <img id="img-result" width="{{width}}" height="{{height}}" src="{{outputImageUrl}}" />
        </div>
         <div class="d-flex flex-column pt-2">
            <div class="progress">
                <div class="progress-bar" role="progressbar" style="width: 100%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">Completed</div>
            </div>
        </div>
        <div class="d-flex flex-row gap-2 pt-2">
            <div class="btn-group dropend w-100">
                <a class="btn btn-sm btn-success w-100" href="{{outputImageUrl}}" download="{{OutputImage}}">Download</a>
                <button type="button" class="btn btn-sm btn-success dropdown-toggle dropdown-toggle-split w-25" data-bs-toggle="dropdown" aria-expanded="false">

                </button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item" href="{{outputImageUrl}}" download="{{OutputImage}}">Download PNG</a></li>
                    <li><a class="dropdown-item" href="{{outputOptionsUrl}}" download="{{OutputOptions}}">Download JSON</a></li>
                </ul>
            </div>
            <button type="button" class="btn btn-sm btn-info w-100" disabled>Image To Image</button>
        </div>
    </div>
</script>

@section Scripts {
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation/dist/additional-methods.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
    <script>

        const stableDiffusionTextToImage = () => {

            let diffusionProcess;
            const optionsForm = $("#TextToImageParameters")
            const outputContainer = $("#output-container");
            const outputContainerGrid = $("#output-container-grid");
            const progressResultTemplate = $("#progressResultTemplate").html();
            const outputResultTemplate = $("#outputResultTemplate").html();
            const connection = new signalR.HubConnectionBuilder().withUrl("/StableDiffusionHub").build();

            const onResponse = (response) => {
                if (!response)
                    return;

                console.log(response);
                updateResultImage(response);
                processEnd();
            }

            const onError = (response) => {
                console.log("ERROR: " + response)
            }

            const onMessage = (response) => {
                console.log("MESSAGE: " + response)
            }

            const onProgress = (response) => {
                console.log(response);
                updateProgress(response);
            }

            const onCanceled = (response) => {
                console.log(response);
                updatePlaceholderImage();
                processEnd();
            }

            const executeTextToImage = async () => {
                const diffusionParams = serializeFormToJson(optionsForm);
                if (!validateForm())
                    return;

                processBegin();
                updatePlaceholderImage();
                diffusionProcess = await connection
                    .stream("ExecuteTextToImage", diffusionParams)
                    .subscribe({
                        next: onResponse,
                        complete: onResponse,
                        error: onError,
                    });
            }

            const cancelDiffusion = async () => {
                diffusionProcess.dispose();
            }

            const updateResultImage = (response) => {
                const width = getWidth();
                const height = getHeight();

                const size = getSafeSize(width, height, 512);
                outputContainer.html(Mustache.render(outputResultTemplate, {
                    width: size.width,
                    height: size.height,
                    ...response
                }));

                const gridSize = getSafeSize(width, height, 256);
                outputContainerGrid.find(".output-progress").remove();
                outputContainerGrid.prepend(Mustache.render(outputResultTemplate, {
                    width: gridSize.width,
                    height: gridSize.height,
                    ...response
                }));
            }

            const updatePlaceholderImage = () => {
                const width = getWidth();
                const height = getHeight();

                const size = getSafeSize(width, height, 512);
                outputContainer.html(Mustache.render(progressResultTemplate, {
                    width: size.width,
                    height: size.height,
                }));

                const gridSize = getSafeSize(width, height, 256);
                outputContainerGrid.find(".output-progress").remove();
                outputContainerGrid.prepend(Mustache.render(progressResultTemplate, {
                    width: gridSize.width,
                    height: gridSize.height,
                }));
            }

            const updateProgress = (response) => {
                const increment = Math.max(100 / response.total, 1);
                const progressPercent = Math.round(Math.min(increment * response.progress, 100), 0);
                const progressBar = $(".progress-result");
                progressBar.css("width", progressPercent + "%");
                progressBar.text(progressPercent + "%");
            }

            const processBegin = () => {
                $(".btn-cancel").removeAttr("disabled");
                $("#btn-txt2img-execute, #btn-img2img-execute").attr("disabled", "disabled");
            }

            const processEnd = () => {
                $(".btn-cancel").attr("disabled", "disabled");
                $("#btn-txt2img-execute, #btn-img2img-execute").removeAttr("disabled");
            }

            const validateForm = () => {
                optionsForm.validate();
                return optionsForm.valid();
            }

            const clearHistory = () => {
                outputContainer.empty();
                outputContainerGrid.empty();
                updatePlaceholderImage();
            }

            const getLayout = () => {
                return $("option:selected", "#result-layout").val();
            }

            const getWidth = () => {
                return +$("option:selected", "#Options_Width").val();
            }

            const getHeight = () => {
                return +$("option:selected", "#Options_Height").val();
            }

            const updateLayout = () => {
                const layout = getLayout();
                if (layout == "Single") {
                    outputContainer.removeClass("d-none").addClass("d-flex");
                    outputContainerGrid.removeClass("d-flex").addClass("d-none");
                    updatePlaceholderImage();
                }
                else if (layout == "Multiple") {
                    outputContainer.removeClass("d-flex").addClass("d-none");
                    outputContainerGrid.removeClass("d-none").addClass("d-flex");
                }
            }

            const getSafeSize = (width, height, max) => {
                let largest = Math.max(width, height);
                if (largest > max) {
                    while (largest > max) {
                        largest -= 16;
                    }

                    const delta = Math.max(width, height) / largest;
                    return {
                        width: width / delta,
                        height: height / delta
                    };
                }
                else if (largest < max) {
                    while (largest < max) {
                        largest += 16;
                    }

                    const delta = largest - Math.max(width, height);
                    return {
                        width: width + delta,
                        height: height + delta
                    };
                }
                return {
                    width: width,
                    height: height
                };
            }

            const serializeFormToJson = (form) => {
                const formDataJson = {};
                const formData = new FormData(document.getElementById(form.attr("id")));
                formData.forEach((value, key) => {

                    if (key.includes("."))
                        key = key.split(".")[1];

                    // Convert number strings to numbers
                    if (!isNaN(value) && value.trim() !== "") {
                        formDataJson[key] = parseFloat(value);
                    }
                    // Convert boolean strings to booleans
                    else if (value === "true" || value === "false") {
                        formDataJson[key] = (value === "true");
                    }
                    else {
                        formDataJson[key] = value;
                    }
                });
                return formDataJson;
            }


            $(".btn-cancel").on("click", cancelDiffusion);
            $("#btn-clear").on("click", clearHistory);
            $("#btn-txt2img-execute").on("click", executeTextToImage);
            $("#result-layout").on("change", updateLayout).trigger("change");
            $(".slider").on("input", function (e) {
                const slider = $(this);
                slider.next().text(slider.val());
            }).trigger("input");




            // Map signalr functions
            connection.on("OnError", onError);
            connection.on("OnMessage", onMessage);
            connection.on("OnCanceled", onCanceled);
            connection.on("OnProgress", onProgress);
            connection.on("OnResponse", onResponse);
            connection.start();
        }

        stableDiffusionTextToImage();
    </script>
}